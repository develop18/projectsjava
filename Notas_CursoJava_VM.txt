Cada vez que vayas a terminar trabajando con un repositorio remoto, lo primero que tienes que hacer es clonarlo.
Pero debes clonarlo en un directorio específico.




Comandos CLI (bash)
pwd		Saber en qué directorio estoy
cd /d		Cambias de torre
cd ..		Para ir hacia el directorio de arriba
ls -la		Ver qué es lo que hay donde estás parado
cd <nombrecarpeta>     Para ir a esa carpeta

Comandos git
git status				Diferencia entre tu repositorio local y el remoto
git add .				Guarda lo que tenemos en la máquina en el index
git commit -m "Cuaquier comentario"	Crea un commit con ese nombre
git push				Sube el commit al repositorio remoto

...............................

Anatomía Java.-

project		(minúsculas)
	packets		(minúsculas)

		classes		(Pascal)
			methods		(Camel)


-------------------------------

Naming conventions


1) Pascal	(comienza con mayúscula)
	UserName
	MonthOfTheYear

2) Camel	(comienza con minúscula)
	ageOfTheUser
	typeOfVariable
	grupoDeAmigos

3) Snake	(guión bajo)
	age_of_the_user
	STEPS_OF_DEFINITIONS

---------------------------------

public		La clase/método podrá ser llamado desde otra clase
private		El método sólo podrá ser llamado dentro de la misma clase donde se ha creado

static		El métoco podrá ser llamado desde el método main como: Clase.método
		De no ponerse, no aparecerá cuando se ponga el "."

----------------------------------

21/09/21
Tareas para proyecto1.-
https://github.com/develop18/proyecto1


1) Crea un nuevo paquete para la empresa com.Informative
2) Dentro del paquete crea 3 clases:
	a) Una clase que contiene el método principal de este proyecto. Inicialmente el bloque de este método estará definido pero lo dejamos por ahora vacío
	b) Una clase que se encargará de datos meteorológicos. Dentro de ella 2 métodos:
		- Imprime la temperatura actual
		- Imprime la humedad actual
	c) Una clase que se dedica a informar en qué lugar vivimos. Sus métodos:
		- Imprimir el nombre de la ciudad
		- Imprimir el código postal
		- Imprimir el país
3) En la clase principal, imprime en este orden:
	a) País
	b) Ciudad
	c) Temperatura
	d) Humedad

-----------------------------------



23/09/21

Most used data types:
Primitives.-
	integral:
		- byte		(1B)
		- short		(2B)
		- int		(4B)
		- long		(8B)

	floating point:
		- float		(4B)
		- double	(8B)

	caracter:
		- char		(2B)

	boolean:	
		- boolean	(1bit)	No está definido con exactitud. Depende de la JVM
		
double puede almacenar: 1.7976931348623157 x 10308, 4.9406564584124654 x 10-324
int puede almacenar: -2,147,483,648 .. 2,147,483,647


Class type.-
	String:
		- referencias. Son instancias de una clase	(22B ?)

La variable creada a partir de la clase cadena es un objeto. El objeto String tiene sus métodos que son estáticos. Pero el objeto creado a partir de él tiene sus métodos y como él no es una clase esos métodos ya no se pueden considerar estáticos.

...............

Tarea.-
Tipos de variables

1) 
	a. Crear una variable para la temperatura en grados Centígrados
----> Nos hemos quedado aquí
	b. Crear otra variable que convierta la primera en Fahrenheit (0°C × 9/5) + 32 = 32°F)
	c. Imprimir ambas con un mensaje "En ºC es: .... y en ºF es ...."

2)
	a. Crear una variable para la edad de un usuario
	b. Una variable para saber qué edad tendrá dentro de 14 años
	c. Otra variable para saber qué edad tenía hace 3 años
	d. Imprimir las 3 variables con un mensaje

3) 	En cada uno de los siguientes incisos imprimir el resultado:

	a. Crear una variable booleana true. Otra false.
	b. Crear 3 variables enteras a, b y c con valores respectivos 4, 8 y 8
	c. Crear una variable booleana con operador lógico a < b
	d. Crear una variable booleana con operador lógico a > b
	e. Crear una variable booleana con operador lógico a <= b
	f. Crear una variable booleana con operador lógico a >= b
	g. Crear una variable booleana con operador lógico a <= c
	h. Crear una variable booleana con operador lógico a >= c
	i. Crear una variable booleana con operador lógico b <= c
	j. Crear una variable booleana con operador lógico b >= c
	k. Crear una variable booleana con operador lógico a == b
	l. Crear una variable booleana con operador lógico a == c
	m. Crear una variable booleana con operador lógico c == a
	n. Crear una variable booleana con operador lógico c == b

4) 
	a. Crear una variable a partir de la clase String que tenga minúsculas y mayúsculas
	b. Crear otra variable vacía a partir de String
	c. Crear otra variable a partir de String pero esta vez será sólo de espacios en blanco
	d. Con alguno de los métodos de esa clase, mostrar la longitud de cada una de esas variables
	e. Con alguno de los métodos de la clase mostrar si c/u de esas variables es vacía
	f. Con alguno de los métodos de la clase mostrar si c/u de esas variables es una cadena en blanco


5)
	a. Crear una variable de cadena con el contenido "Esto es positivo. Estamos ganando tiempo"
	b. Crear una variable que use el método charAt para averiguar qué letra hay en una posición determinada de la cadena creada anteriormente. O espacios.
	

6) 
	a. Crear una variable de cadena con cualquier contenido
	b. Averiguar con qué métodos puedo conocer el índice de un carácter que existe dentro de la cadena. Guardarlo en una variable e imprimirlo.


7)
	a. Crear una variable de cadena con contenido: "tenemos que hacer esto?"
	b. Averiguar qué hace el método lastIndexOf. Probar con la letra 'h' y luego con la 'e'

8)
	a. Crear una variable de cadena con contenido: "Sí, "
	b. Crear una variable de cadena con contenido: "es importante."
	b. Averiguar qué hace el método concat. Usarlo para concatenar la segunda con la primera y luego la primera con la segunda.


...........

Tarea.-
Operador "+". Cadenas y/o números


1)	
	a. Crear 2 variables de cadena part1 y part2 con cualquier contenido. Imprimir
		part1 + part2
		part1 + " " + part2
		part2 + part1

2)
	¿Qué se espera en los siguientes casos?
	a. "My favourite number is " + 7
	b. "My favourite number is " + 200.12
	c. 7 + 200.12
	d. "My favourite number is " + 7 + 200.12
	e. 7 + 200.12 + " is my favourite number"
	f. "My favourite number is " + (7 + 200.12)
	g. Crea una variable numérica que almacene 7 + 200.12 e imprime un mensaje diciendo que ese es tu número favorito.

............
Nota.-
Variables de referencia a partir de String

String s1 = "Hello"
String s2 = s1

=> s1 y s2 son diferentes pero referencian al mismo valor

............

Tarea.-
Instanciando objetos.


ClassName objectName = new ClassName(Parameters);
Pero para la clase String no es necesario porque esa clase es inmutable, es decir, su valor NO se puede cambiar. Si lo intentamos lo que se crea es una referencia a otra dirección.

Reading input from keyboard:

Scanner input = new Scanner(System.in);
float f = input.nextFloat();


1)	
	a. Crea un objeto de la clase Point e imprímelo
	

2)
	a. Crea un objeto de la clase Scanner, que nos permite leer el teclado
	
3)
	a. Escribe un método que nos pida un nombre y espere a que lo tecleemos. Imprimir el nombre.
	b. Método que tome sucesivamente 2 valores numéricos enteros del teclado y diga si el primero es mayor que el segundo.
	c. Tomar sucesivamente 3 valores numéricos de punto flotante y realizar A+B/C. Agrupar por pares y predecir resultado para aprender las precedencias de las operaciones.
	d. Pedir un nombre y una edad. Imprimir con los mensajes correspondientes.
	e. Método que nos pida el nombre completo (nombre y apellido) y lo muestre. (Diferencia entre los métodos next y nextline)
	f. Nombre completo (apellidos) y edad, en la misma pregunta. El usuario da <enter> después del nombre completo
	System.out.println(s.nextline() + "! you are " + s.nextInt() + " years old.")


..........
Tema.-
Type faster

Shortcuts:

Ctrl + Left arrow		Mueve cursor una palabra a la izquierda
Ctrl + Right arrow		Mueve cursor una palabra a la derecha
[Fn +] Inicio			Mueve cursor al inicio de la línea
[Fn +] Fin			Mueve cursor al final de la línea
RePag (PageUp)			Mueve cursor al inicio del fichero
AvPag (PageDown)		Mueve cursor al final del fichero. Si el fichero cubre más de una 					página, presionar PageDown otra vez

Ctrl + Down arrow		Scroll bar hacia abajo
Ctrl + Up arrow			Scroll bar hacia arriba

Alt + Left/Right arrow		Selecciona la siguiente pestaña del editor (izquierda/derecha)

Shift ( + anteriores) 		Selecciona el pedazo que vaya recorriendo
Shift + Inicio			Selecciona hasta el inicio de la línea
Shift + End			Selecciona hasta el final de la línea
Shift + Ctrl + Home		Selecciona hasta el inicio del fichero
Shift + Ctrl + End		Selecciona hasta el final del fichero
Shift + Up arrow		Selecciona hasta la misma posición en la línea de arriba
Shift + Down arrow		Selecciona hasta la misma posición en la línea de abajo
Ctrl + A			Selecciona todo el fichero
Ctrl + w			Va ampliando la selección sucesivamente a partir de donde estoy
				
Shift + Backspace		Borra hacia atrás tabulaciones, sin saltar a la línea de arriba
Ctrl + d			Duplica la línea donde estoy
Ctrl + x			Borra la línea completa donde estoy
Ctrl + / (Numpad)		Comenta la línea (o varias líneas, si están seleccionadas)
				Para quitarlo, nuevamente presionar: Ctrl + / (Numpad)
Ctrl + Shift + / (Numpad)	Abre y cierra un bloque de comentario
Shift + Alt + Up arrow		Sube la línea donde estoy
Shift + Alt + Down arrow	Baja la línea donde estoy


Ctrl + Alt + s			Abre diálogo de Settings
Ctrl + Shift + f		Busca dentro de ese path
Ctrl + f			Busca dentro del fichero que tengo activo
Alt + j				Va adicionando a la selección el siguiente encontrado
Ctrl + mouse			Pequeña info
Ctrl + N			Ir a clase
Ctrl + G			Ir a línea
Ctrl + Alt + B			Ir a implementación
Ctrl + Shift + B		Ir a declaración del tipo	
Shift + F10			Ejecutar

Ctrl + p			Lista los constructores que hay para esa clase
Alt + Ins (en variable)		Menú de constructores, getters y setters, etc.
fori + Tab			Lazo for con i
				fore	Lazo for each
				
soutv + Tab			Imprimir con mensaje delante
Alt + Enter			Importar
..........

Tarea.-
Autoincremento y autodecremento. Operador de asignación aumentada

1) 
	a. Crear una variable entera y asignarle un valor
	b. Imprimir su valor autoincrementado

2) 
	a. Crear una variable entera y asignarle un valor
	b. Imprimir su valor autodecrementado

3) 
	a. Crear una variable x y asignarle un valor 6
	b. ¿Qué producen las siguientes asignaciones?
		I) x += 1
		II) x += 3
		III) x *= 2
		IV) x *= 1
		V) x *= 5+1
		VI) x *= x
 
...........

Tema.-
Relational operators: ==, !=, >, >=, <. >=

boolean b1 = ( 25 == 5*5) // true
boolean b2 = ( 2 == 3) // false
boolean b3 = (2 + 3) == (6 - 1) // true
boolean b4 = (2 + 3) != (6 - 1) // false
Los paréntesis son opcionales. Sólo para hacer el código más legible

...........

Tema.-
Lógical operators: Para construir operaciones complejas. Se usan entre valores booleanos y su resultado es booleano también.
AND	&&
OR	||
NOT	!


Tarea.-
1) ¿Cuál es el resultado de esta operación? ¿Es verdadera?
	boolean b1 = true && true;
	boolean b2 = b1 && false && true;
	boolean b3 = b2 || true;
	boolean b4 = !b2
	boolean b5 = !(b4 && b2);
...........

Tema.-
Conditional operator

booleanExpression ? expression1 : expression2

Tarea.-

1) ¿Cuál es el valor que toma la variable i?
	int a = 10;
	int b = 15;
	int max = a > b? a a : b;

2) 
	String name = "Mi academia";
	System.out.println ( name.isEmpty() ? "No existe" : name)
	a. ¿Qué hace el anterior bloque? 
	b. ¿Qué ocurre si hago vacía la variable name?
	c. ¿Qué ocurre si niego el método? (!name.isEmpty())

...........

Tarea.-
If statement
Expresión más general, con anidados:

if(boolean-expression) {
	statements
}
else if(boolean-expression) {
	statements
}
else {
	statements
}

Los "else" son opcionales. Y los statements no tienen por qué ser múltiples.

1) 
	a. Leer un entero que dé el usuario
	b. Imprimir si el entero es mayor o menor que 100


...........

Tema.-
Switch statement

switch (expression) {
    case value1:
        statement(s)
	break;
    case value2:
        statement(s)
	break;
    default:
	statements(s)
}

...........

Tarea.-
Estructuras de programación: Loops

1)	While loop
	
	while(boolean-expression) {
		statements
	}
	
	Escribe un programa que pide al usuario un entero entre 6 y 10 y no sale del bucle hasta que ese valor cumpla dicha condición.
	Ej: "Enter a number between 6 and 10 --> "
	    "Ooops! It doesn't meet the condition. Try again: "


2) 	Do While loop
	
	do {
		statements
	} while (boolean-expression)

	Imprime 4 veces "Hola"


3)	For loop
	
	for (variable; condition; change) {
		statements
	}
	(La variable se puede inicializar en la declaración del bucle: "variable")
	Imprime 6 veces la frase "No tengo prisa"


Nota: Los bucles se pueden anidar. Para evitar confusiones, utilizar variables diferentes en el bucle exterior y el interior.

...........

Tema.-
Break y continue
break: rompe el bucle independientemente de cualquier condición
continue: salta el resto del cuerpo del body y CONTINÚA ejecutando el bucle como si hubiésemos terminado la ejecución de ese body en ese momento.

...........

Tema.-
Scope and local variables

Variable local: la que está definida dentro de un método.
Los parámetros son también variables locales porque su scope es dentro del método.
El scope de una variable local comienza justo donde se declara y termina al final del bloque. Por eso variables del mismo nombre pero con distintos scopes no tienen el mismo valor, no son lo mismo.

...........

Tarea.-
Methods and return types

1) Método void. Escribe un método que no devuelva un valor sino que realice una acción. Ej: imprimir un mensaje. 

2) Método que retorna un valor.
	public static int sum(int x, int y) {
		int sum = x + y;
		return sum;	
	}
 	
	Y en el método main: sum(1, 2)

	a. Escribe un método que devuelva el producto de 2 números. Imprime ese resultado de varias combinaciones desde el método main
	(Nota: esta es la forma de pasar arguments by value)

...........

Tema.-
Pasando argumentos by reference

Cuando se usa un objeto, el argumento que se pasa a un método es una referencia. Se cumple para todos los objetos excepto para String, porque es inmutable.

Ver en mi proyecto "payment1" la clase PassingArguments

...........

Tema.-
Method Overloading

Es pasar el mismo método con diferentes signatures where the signature can differ by the number of input parameters or type of input parameters or both


sayHi()
sayHi("Hello my friend")

sum(2, 3)
sum("Resultado", 4, 5, 7.8)

Overloaded method can have different return types:
sayHi();
Donde:
public static void sayHi() {
	System.out.println("hoola")
}

ó
System.out.println( sayHi("Ernesto")
Donde:
public static String sayHi(String name) {
	return "Hi " + name 
}

Nota: Overloaded method MUST have different parameters. Si tengo 2 métodos con el mismo nombre y la misma cantidad de parámetros, pero por ejemplo uno es void y el otro retorna una cadena, eso no es overloading sino que son 2 métodos diferentes.
Métodos overloaded TIENEN que tener distintos parámetros y PUEDEN tener distintos return points.

..........

Tema.-
Null y arrays

Recordar: las primitive variables no tienen null. Sólo las reference.

null: el valor de un objeto que no referencia nada. Ej: String text (y no inicializar con ningún valor)
Si hacemos:
text = "some algo"	// Aquí ya deja de ser null

array: collection of variables of the same data type. 
	- An array in Java is an object
	- An array references a group of data
	- The size of an array is fixed

int miArreglo;		// En estos momentos esta variable miArreglo contiene null, porque no está apuntando a nada, es decir, NO está referenciando ningún arreglo.
miArreglo = new int[10]	// Ahora ya no es nulo, porque está referenciando una dirección de una colección de 10 elementos enteros

Pero se puede hacer en un único statement:
int miArreglo = new int[10]	// Ahora miArreglo es un array que puede contener 10 enteros

Array initializers.
double[] misNumbers = {1.8, 2.7, -9.0, 0.33};
ó
misNumbers[0] = 1.8 
misNumbers[1] = 2.7	...etc

...........

Tema.-
Anonymous arrays. Passing arrays to methods

anonymous array: an array without a variable referencing it
Ej:
new int[] {1, 2, 5, 6};
Caso de uso:
printArray(new int[] {1, 2, 5, 6});
Es decir, tenemos un método al que le pasamos directamente un arreglo con valores para probarlo, y por tanto no necesitamos una variable para ello.

Los arreglos son pasados a los métodos como referencia y por tanto lo que se haga con sus variables dentro del método en cuestión afectan al arreglo original. ¿Por qué? Porque los arreglos son OBJETOS y por esa razón siempre serán pasados como referencia.

Cuando se retorna de un método lo que se devuelve es la dirección del arreglo. Es destruída en cuanto se sale del bloque del método. Pero si es referenciada en el método externo por una variable, entonces esta variable sí tiene una dirección y es la de ese arreglo.

...........

Tema.-
Array class

The array class is a class that contains some static methods that are used with arrays: sorting, searching, comparing, filling, returning a string representation. El arreglo se entrega como parámetro a los métodos de esta clase, una vez que fue creado como variable.
Nota: el método search funciona a partir del método sort. De manera que un tipo de arreglo que no pueda ser ordenado (ejemplo, objetos Point) no podrá ser "searcheado" y dará una excepción en "lang.Comparable"

Comparando arreglos:
Si se usa == dará diferente porque los arreglos son objetos y por tanto estamos comparando sus referencias, es decir sus direcciones. 
Para comparar el contenido de dos arreglos hay que usar el método ".equals"
Existe ".equals" para la clase Array y también ".equals" para la clase String. La sintaxis es diferente pero en ambos casos lo que se compara es el contenido. Lo mismo para la clase Point. Es decir, en los objetos, el método ".equals" compara los contenidos y el "==" compara la variable como tal, que si es un objeto es sólo la referencia, es decir, una dirección a memoria.

..........

Tema.-
Pasando una cantidad variable de argumentos a un método

public static int sum(int... numbers) {

}

La elipsis representa que vamos a enviar una cantidad no fija de argumentos y en este caso es una cantidad variable de argumentos tipo int. Para poder resolver esto Java en este caso crea un arreglo de nombre "numbers" en este caso. Por tanto, dentro del método a esa variable hay que tratarla como un arreglo.
Ese ejemplo podemos usarlo así:
System.out.println( sum(1, 7, -2) );	// 6 --> Pasando una cantidad no fija de parámetros

ó
int[] numbers = {1, 7, -2};
System.out.println( sum(numbers) );	// 6 --> Pasando una variable que es un arreglo

ó
System.out.println( sum(new int[] {1, 7, -2} )); 	// 6 --> Pasando un anonymous array	

Recordar:
- Sólo 1 parámetro de longitud variable puede especificarse en un método
- Tiene que ser el último parámetro. Todos los demás parámetros tienen que precederle.
- Puede pasarse un arreglo o un número variable de argumentos (con la elipsis)
- Java crea un arreglo y pasa el argumento al método.

.............

Tema.-
Two-dimensional arrays


int[][] numbers;		// Rememember it is null
numbers = new int[5][3];	// Constructor. Ahora es un arreglo de 5 filas por 3 columnas

ó
int[][] numbers = new int[5][3];
Y si queremos inicializar al declarar:
int[][] numbers = { {3, 5, 7}, {10, 2, 9} }
Esto es un arreglo que tiene como primera fila 3, 5, 7 y como segunda fila 10, 2, 9

Recordar: cuando queremos representar los números de un arreglo de enteros como cadenas debemos usar el método deepToString (no el toString) porque son objetos.

..........

Tema.-
Array List

Array list: un arreglo de tamaño que no es fijo. Es dinámico. Puede cambiar de acuerdo a los elementos que contenga. Es un objeto.

ArrayList<Integer> numbers;	// null
numbers = new ArrayList<>();	// constructor de la clase ArrayList
NO se usan los tipos primitivos, sino clases. Porque sólo almacenamos objetos (String, Integer, Boolean, Double, Character...), no tipos primitivos (int, boolean, double, char...)

ó en un solo statement:
ArrayList<Integer> numbers = new ArrayList<>();

Se especifica el tipo sólo a la izquierda, porque la parte de la izquierda crea el array list de enteros y el miembro derecho allocates el espacio en la memoria.

ArrayList<String> fruits = new ArrayList<>();
fruits.add("Apple");		// Así se adicionan elementos a esa lista dinámica. Existen otros métodos también para insertarlos en determinadas posiciones

Para accesar un elemento: get()
sout...	fruits.get(3)

Para sustituir un elemento: 
fruits.set(2, "Orange");

Para quitar un elemento:
fruits.remove(3);		// Removing by index
ó
fruits.remove("Banana");	// Removing by value

Para borrar todos los elementos:
fruits.clear()

Para saber el tamaño:
sout...	fruits.size()

Para ordenarlo se usa el método sort() de la clase Collections
Collections.sort(fruits);


...........

Tema.-
For each

for ( TYPE VAR_NAME : ArrayList/Array ) {
}

TYPE VAR_NAME 	es la declaración de una variable que irá tomando el valor de cada elemento a medida que iteramos (como en Python). Ej:
for ( String item : itemArrayList )
	System.out.print(item + " ");

...........

Tema.-
OOP: objetos y clases

Objeto: representa una entidad. Tiene: estado, comportamiento e identidad.

El "estado" está representado por los campos del objeto con sus valores actuales. También es conocido como "propiedadese" o "atributos".

El "comportamiento" son los métodos del objeto. También conocido como "acciones".

La "identidad" es lo que hace único a un objeto. Ej:
Point p1 = new Point(1,2);
Point p2 = new Point(1,2);
System.out.println( p1 == p2 );		// false. En este caso la identidad del objeto es la 					// dirección del objeto en la memoria

La clase es la que define los campos y las acciones que van a tener los objetos.
Podemos decir que la clase es el template o blueprint que define los data fields y methods que tendrá un objeto.
El objeto es una instancia de la clase.

Constructor: método usado para crear objetos. Un constructor puede hacer cualquier cosa pero está designado a inicializar acciones, por ejemplo, a inicializar los campos de datos de un objeto.
	- tiene que tener el mismo nombre que la clase
	- no tiene return type
	- se invocan usando el operador "new"
	- inicializan objetos
	- un default constructor es un constructor sin argumentos y con el cuerpo vacío. No hace nada. Sólo se utilizará para crear un objeto.

Recordar: Cuando no se crean constructores, Java automáticamente crea un default constructor. Pero cuando se crea un constructor, el default constructor no se crea.
 

Point p1 = new Point(0,1)
	estamos creando un objeto Point y apuntándolo con la variable p. La palabra clave "new" es la que llama al constructor de esa clase. El método que construye es Point(0,1) que está inicializando ese objeto. Y en realidad ese constructor es:

public Point ( int x, int y ) {
	this.x = x;
	this.y = y;
}

Default constructor: Un constructor que no tiene parámetros
Recordar: Si creamos una clase sin crearle su constructor, Java automáticamente crea un default constructor que no toma parámetros y podremos usarlo para crear objetos de esa clase.

Instance variables: las variables declaradas directamente dentro de una clase. Pueden accesarse por cualquier método dentro de la clase. Cuando se declaran sin asignación toman valor nulo, como hemos visto en otros ejemplos. 

..........

Tema.-
Static variables and methods

- Static variables and methods belong to the class and are shared among all objects.
- If an OBJECT modifies (el valor de) a static variable, all objects (el valor de la variable estática correspondiente en ese objeto) of the same class are affected.
- A static variable can be accessed without creating an instance of the class. Esto es porque la variable estática pertenece a la CLASE, no al objeto. Entonces, podemos acceder a una variable estática por 2 métodos: creando un objeto o usando el nombre de la clase. The same for a static method. 
- A static method can not access instance variables or methods.
- A static method can only access static variables and static methods.

a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects:

...........

Tema.-
Visibility modifiers.

public: from any other class (even from other packages)
private: only from the class
protected: 
default: from any class but only in the same package

Por eso, para acceder variables private se crean los getters y setters y a ellos sí se les hace public. (Encapsulation)

getter (accessor)	public propertyType getPropertyName()
setter (mutator)	public void setPropertyName(...)

..........

Tema.-
Clases inmutables. Objetos inmutables			<--- OJO. Revisar este tema

objeto inmutable: su contenido no puede cambiarse. Es decir, los valores de sus campos no pueden alterarse.
clase inmutable: la clase que se usa para crear un objeto inmutable.
Ej: la clase String es inmutable y cualquier objeto que se cree a partir de ella es inmutable.
En una clase inmutable:
	- todos los campos tienen que ser privados
	- no puede haber setters
	- ningún getter puede devolver campos de datos que sean mutables, es decir, un getter que devuelva un objeto, ese objeto tiene que ser inmutable. Eso aplica a campos de tipo referencia (o sea, objetos)

........

Tema.-
Keyword "this"

this: referencia al propio OBJETO. Se usa para:
	- referenciar instance fields
	- referenciar instance methods
	- invocar un constructor


Inner classes: clase dentro de otra clase. Por tanto es una clase miembro de la que la contiene. Su visibilidad es default. Y puede:
	- acceder miembros private de la clase que la contiene
	- tener modificadores de acceso private

	No puede:
	- tener sus propias variables private. (hay una excepción: las final)

Hay varios tipos de inner classes y la ventaja de usarlas es que al ser declaradas private podemos limitar el acceso.

.........

Tema.-
UML: Unified Modeling Language

Se inventó para crear diagramas en computación. Ej: el diagrama de una clase.
Primero vienen los atributos, luego una línea clara de separación y a continuación vienen los métodos. Todos ellos son los miembros de una clase

"-" o "." indican que el miembro es private
Si está subrayado es que el miembro es static
"+" indica que el miembro es público
Si el método no tiene un type a la derecha es porque es un constructor (además tiene el mismo nombre que la clase ¿seguro?)

